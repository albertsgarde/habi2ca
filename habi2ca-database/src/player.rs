//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use crate::{implement_id, level::LevelId};

use super::{level, task};

implement_id!(PlayerId);

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "player")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: PlayerId,
    pub name: String,
    #[sea_orm(column_type = "Double")]
    pub xp: f64,
    #[sea_orm(default = "1")]
    #[serde(rename = "level")]
    pub level_id: LevelId,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "task::Entity")]
    Task,
    #[sea_orm(
        belongs_to = "level::Entity",
        from = "Column::LevelId",
        to = "level::Column::Id"
    )]
    Level,
}

impl Related<task::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Task.def()
    }
}

impl Related<level::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Level.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
