//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15
use sea_orm::{entity::prelude::*, Set};
use serde::{Deserialize, Serialize};

use crate::{implement_id, level::LevelId};

implement_id!(PlayerId);

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "player")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: PlayerId,
    pub name: String,
    #[sea_orm(column_type = "Double")]
    pub xp: f64,
    #[sea_orm(default = "1")]
    pub level: LevelId,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::task::Entity")]
    Task,
}

impl Related<super::task::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Task.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

pub fn new(name: impl AsRef<str>) -> ActiveModel {
    ActiveModel {
        name: Set(name.as_ref().to_owned()),
        xp: Set(0.0),
        level: Set(1.into()),
        ..Default::default()
    }
}
